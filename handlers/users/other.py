from aiogram import Router
from aiogram.types import Message
from dotenv import load_dotenv
from data.config import OPEN_AI_API
from utils.openai_wrapper import call_openai_chat
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import re
import ast
import os

load_dotenv()
router = Router()

def extract_last_json_block(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞–ª–∏–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å (JSON –∏–ª–∏ Python dict) –∏–∑ —Ç–µ–∫—Å—Ç–∞
    """
    stack = []
    start = None
    for i, c in enumerate(text):
        if c == '{':
            if not stack:
                start = i
            stack.append(c)
        elif c == '}':
            stack.pop()
            if not stack and start is not None:
                candidate = text[start:i+1]
                try:
                    parsed = ast.literal_eval(candidate)
                    return text[:start].strip(), parsed
                except Exception:
                    continue
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å.")

def split_message(input_text: str):
    """
    –î–µ–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ user_message –∏ structured_data.
    –ò—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–≤–∞—Ä—å –≤ —Ç–µ–∫—Å—Ç–µ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π, –≤–∞–ª–∏–¥–Ω—ã–π).
    """
    user_message, structured_data = extract_last_json_block(input_text)

    if not isinstance(structured_data, dict) or "type" not in structured_data:
        raise ValueError("–ë–ª–æ–∫ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á 'type'.")

    return {
        "user_message": user_message,
        "structured_data": structured_data
    }

def create_inline_keyboard_from_list(titles: list[str], buttons_per_row: int = 2):
    """
    –°–æ–∑–¥–∞—ë—Ç InlineKeyboardMarkup, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.
    buttons_per_row ‚Äî —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    row = []
    for idx, title in enumerate(titles):
        button = InlineKeyboardButton(text=title, callback_data=f"track_{idx}")
        row.append(button)
        if len(row) == buttons_per_row:
            keyboard.inline_keyboard.append(row)
            row = []
    
    # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    if row:
        keyboard.inline_keyboard.append(row)
    
    return keyboard

@router.message()
async def other(message: Message):
    user_id = message.from_user.id
    user_input = message.text

    response = call_openai_chat(
        api_key=OPEN_AI_API,
        messages=[{"role": "user", "content": user_input}],
        system_prompt="""
–¢—ã ‚Äî –ù–∏–∫–∏, –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ **–æ—Ç–¥–µ–ª—å–Ω–æ** –≤—ã–≤–æ–¥–∏—Ç—å JSON **—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—à–∏–Ω—ã**.

**–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π JSON –≤–Ω—É—Ç—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è.**
–°–Ω–∞—á–∞–ª–∞ –∏–¥—ë—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî JSON.

–ü—Ä–∏–º–µ—Ä:
–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤:
1. –°–∫—Ä–∏–ø—Ç–æ–Ω–∏—Ç ‚Äî "–ü–æ–ª–æ–∂–µ–Ω–∏–µ"
2. AIGEL ‚Äî "–¢–∞—Ç–∞—Ä–∏–Ω"

{
  "type": "music_recommendation",
  "tracks": ["–°–∫—Ä–∏–ø—Ç–æ–Ω–∏—Ç ‚Äî –ü–æ–ª–æ–∂–µ–Ω–∏–µ", "AIGEL ‚Äî –¢–∞—Ç–∞—Ä–∏–Ω"]
}
""",
        temperature=0.9,
        model="gpt-4",
        max_tokens=512
    )

    try:
        result = split_message(response)
    except ValueError as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏:\n" + str(e))
        return

    # JSON –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –ª–æ–≥–∞—Ö –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –ë–î
    # print(f"JSON STRUCTURED DATA (–¥–ª—è –ë–î):\n{result['structured_data']['tracks']}")
    titles = result['structured_data']['tracks']

    print()

    keyboard = create_inline_keyboard_from_list(titles)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    await message.answer(f"{result["user_message"]}", reply_markup=keyboard)

from aiogram.types import CallbackQuery
from utils.tube_search import search_youtube
from utils.download_youtube import download_audio_from_youtube



@router.callback_query()
async def handle_track_selection(callback: CallbackQuery):
    await callback.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    data = callback.data
    if not data.startswith("track_"):
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.")
        return

    try:
        index = int(data.split("_")[1])
    except ValueError:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫.")
        return

    # –î–æ—Å—Ç–∞—ë–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
    # (–º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Å—ë –µ—â—ë –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    keyboard_rows = callback.message.reply_markup.inline_keyboard
    flat_titles = [btn.text for row in keyboard_rows for btn in row]

    if index >= len(flat_titles):
        await callback.message.answer("–ò–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞.")
        return

    track_name = flat_titles[index]
    await callback.message.answer(f"üîç –ò—â—É —Ç—Ä–µ–∫: *{track_name}*", parse_mode="Markdown")

    # –ü–æ–∏—Å–∫ –ø–æ YouTube
    results = search_youtube(track_name)
    if not results:
        await callback.message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    video_url = results[0]['link']
    await callback.message.answer(f"‚ñ∂Ô∏è –ù–∞—à—ë–ª: {video_url}")

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
    mp3_path = download_audio_from_youtube(video_url)
    if not mp3_path or not os.path.exists(mp3_path):
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    await callback.message.answer_audio(audio=open(mp3_path, 'rb'), caption=track_name)

    # –û—á–∏—Å—Ç–∫–∞
    try:
        os.remove(mp3_path)
    except Exception as e:
        print(f"[warning] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")